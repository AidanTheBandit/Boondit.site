---
import Layout from "@/layouts/Layout.astro";
import Section from "@/components/Section.astro";
---

<Layout title="R1 Creation Gen - Boondit">
  <Section title="R1 QR Code Generator" className="min-h-screen">
    <div class="max-w-7xl mx-auto p-6">
      
      <!-- Header -->
      <header class="text-center mb-10">
        <h1 class="text-4xl font-bold text-white mb-3">R1 Creation Generator</h1>
        <p class="text-gray-400 text-lg">Generate QR codes with rich metadata for creations</p>
      </header>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        <!-- Left Column: Forms -->
        <div class="lg:col-span-2 space-y-6">
          
          <!-- Creation Details Card -->
          <article class="card">
            <h2 class="card-title">
              Creation Details
            </h2>
            
            <div class="space-y-5">
              <div class="form-group">
                <label for="url" class="form-label">URL</label>
                <input 
                  type="url" 
                  id="url" 
                  class="form-input"
                  placeholder="https://example.com"
                  value="https://barkle.chat"
                />
              </div>

              <div class="form-group">
                <label for="title" class="form-label">Title</label>
                <input 
                  type="text" 
                  id="title" 
                  class="form-input"
                  placeholder="Enter title"
                  value="Barkle"
                />
              </div>

              <div class="form-group">
                <label for="description" class="form-label">Description</label>
                <textarea 
                  id="description" 
                  rows="3"
                  class="form-input resize-none"
                  placeholder="Enter description"
                >Social platform</textarea>
              </div>

              <div class="form-group">
                <label for="author" class="form-label">
                  Author <span class="text-gray-500 text-xs">(optional)</span>
                </label>
                <input 
                  type="text" 
                  id="author" 
                  class="form-input"
                  placeholder="Enter author name"
                />
              </div>

              <div class="form-group">
                <label for="iconUrl" class="form-label">
                  Icon URL <span class="text-gray-500 text-xs">(optional)</span>
                </label>
                <input 
                  type="url" 
                  id="iconUrl" 
                  class="form-input"
                  placeholder="https://example.com/icon.png"
                />
              </div>

              <div class="form-group">
                <label for="screenshotUrl" class="form-label">
                  Screenshot URL <span class="text-gray-500 text-xs">(optional)</span>
                </label>
                <input 
                  type="url" 
                  id="screenshotUrl" 
                  class="form-input"
                  placeholder="https://example.com/screenshot.png"
                />
                <button 
                  id="takeScreenshot" 
                  class="btn-secondary mt-3 w-full"
                >
                  Generate Screenshot URL
                </button>
              </div>

              <div class="form-group">
                <label for="themeColor" class="form-label">Theme Color</label>
                <div class="flex gap-3">
                  <input 
                    type="color" 
                    id="themeColor" 
                    class="color-picker"
                    value="#FE5000"
                  />
                  <input 
                    type="text" 
                    id="themeColorText"
                    class="form-input flex-1"
                    value="#FE5000"
                  />
                </div>
              </div>
            </div>
          </article>

          <!-- QR Styling Card -->
          <article class="card">
            <h2 class="card-title">
              QR Code Styling
            </h2>
            
            <div class="space-y-4">
              <div class="form-group">
                <label for="qrBgColor" class="form-label">Background Color</label>
                <div class="flex gap-3 items-center">
                  <input 
                    type="color" 
                    id="qrBgColor" 
                    class="color-picker"
                    value="#FFFFFF"
                  />
                  <input 
                    type="text" 
                    id="qrBgColorText"
                    class="form-input flex-1"
                    value="#FFFFFF"
                  />
                </div>
              </div>

              <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div class="form-group">
                  <label for="qrDotsStyle" class="form-label">Dots Style</label>
                  <select id="qrDotsStyle" class="form-select">
                    <option value="rounded">Rounded</option>
                    <option value="dots">Dots</option>
                    <option value="classy">Classy</option>
                    <option value="classy-rounded">Classy Rounded</option>
                    <option value="square">Square</option>
                    <option value="extra-rounded">Extra Rounded</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="qrCornerSquareStyle" class="form-label">Corner Squares</label>
                  <select id="qrCornerSquareStyle" class="form-select">
                    <option value="dot">Dot</option>
                    <option value="square">Square</option>
                    <option value="extra-rounded">Extra Rounded</option>
                  </select>
                </div>

                <div class="form-group">
                  <label for="qrCornerDotStyle" class="form-label">Corner Dots</label>
                  <select id="qrCornerDotStyle" class="form-select">
                    <option value="dot">Dot</option>
                    <option value="square">Square</option>
                  </select>
                </div>
              </div>
            </div>
          </article>

          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-4">
            <button id="fetchMetadata" class="btn-primary flex-1">
              Fetch Metadata
            </button>
          </div>
        </div>

        <!-- Right Column: Previews -->
        <aside class="space-y-6">
          
          <!-- QR Preview Card -->
          <article class="card">
            <h3 class="card-subtitle">QR Code Preview</h3>
            <div class="preview-box" id="qrCodeWrapper">
              <p class="preview-placeholder">Generate a QR code to see preview</p>
            </div>
            <button 
              id="downloadQR" 
              class="btn-accent w-full mt-4"
              disabled
            >
              Download QR Code
            </button>
          </article>

          <!-- Screenshot Preview Card -->
          <article class="card">
            <h3 class="card-subtitle">Screenshot Preview</h3>
            <div class="preview-box-sm" id="screenshotWrapper">
              <p class="preview-placeholder">Enter a screenshot URL to see preview</p>
            </div>
          </article>

          <!-- JSON Preview Card -->
          <article class="card">
            <h3 class="card-subtitle">JSON Data</h3>
            <pre id="jsonPreview" class="json-preview">{`{
  "title": "Barkle",
  "url": "https://barkle.chat",
  "description": "Social platform",
  "iconUrl": "",
  "themeColor": "#FE5000",
  "author": "",
  "screenshotUrl": ""
}`}</pre>
          </article>
        </aside>

      </div>
    </div>
  </Section>
</Layout>

<script is:inline>
  let isInitialized = false;
  let generatedQRCode = null;

  // Utility Functions
  const getElements = () => ({
    url: document.getElementById('url'),
    title: document.getElementById('title'),
    description: document.getElementById('description'),
    author: document.getElementById('author'),
    iconUrl: document.getElementById('iconUrl'),
    screenshotUrl: document.getElementById('screenshotUrl'),
    themeColor: document.getElementById('themeColor'),
    themeColorText: document.getElementById('themeColorText'),
    qrBgColor: document.getElementById('qrBgColor'),
    qrBgColorText: document.getElementById('qrBgColorText'),
    qrDotsStyle: document.getElementById('qrDotsStyle'),
    qrCornerSquareStyle: document.getElementById('qrCornerSquareStyle'),
    qrCornerDotStyle: document.getElementById('qrCornerDotStyle'),
    fetchMetadataBtn: document.getElementById('fetchMetadata'),
    takeScreenshotBtn: document.getElementById('takeScreenshot'),
    downloadQRBtn: document.getElementById('downloadQR'),
    qrCodeWrapper: document.getElementById('qrCodeWrapper'),
    screenshotWrapper: document.getElementById('screenshotWrapper'),
    jsonPreview: document.getElementById('jsonPreview')
  });

  const getFormData = (elements) => ({
    title: elements.title?.value || '',
    url: elements.url?.value || '',
    description: elements.description?.value || '',
    iconUrl: elements.iconUrl?.value || '',
    themeColor: elements.themeColor?.value || '#FE5000',
    author: elements.author?.value || '',
    screenshotUrl: elements.screenshotUrl?.value || ''
  });

  // Update Functions
  const updateJsonPreview = (elements) => {
    const data = getFormData(elements);
    if (elements.jsonPreview) {
      elements.jsonPreview.textContent = JSON.stringify(data, null, 2);
    }
  };

  const updateScreenshotPreview = (elements) => {
    const url = elements.screenshotUrl?.value || '';
    if (!elements.screenshotWrapper) return;

    if (url) {
      elements.screenshotWrapper.innerHTML = `
        <img 
          src="${url}" 
          alt="Screenshot preview" 
          class="max-w-full rounded-lg object-contain"
          onerror="this.parentElement.innerHTML='<p class=\\'text-red-400 text-center\\'>Failed to load screenshot</p>'"
        />`;
    } else {
      elements.screenshotWrapper.innerHTML = '<p class="preview-placeholder">Enter a screenshot URL</p>';
    }
  };

  // Color Sync
  const syncColorInputs = (colorInput, textInput, callback) => {
    if (!colorInput || !textInput) return;
    
    colorInput.addEventListener('change', () => {
      textInput.value = colorInput.value;
      callback?.();
    });
    
    textInput.addEventListener('change', () => {
      colorInput.value = textInput.value;
      callback?.();
    });
  };

  // Metadata Fetcher
  const fetchMetadata = async (elements) => {
    const url = elements.url?.value;
    if (!url) {
      alert('Please enter a URL first');
      return;
    }

    const btn = elements.fetchMetadataBtn;
    btn.disabled = true;
    btn.textContent = 'Fetching...';

    try {
      const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);
      if (!response.ok) throw new Error('Proxy request failed');
      
      const data = await response.json();
      if (!data.contents) throw new Error('No content received');
      
      const parser = new DOMParser();
      const doc = parser.parseFromString(data.contents, 'text/html');
      
      // Extract metadata
      const metadata = {
        title: doc.querySelector('meta[property="og:title"]')?.getAttribute('content') ||
               doc.querySelector('title')?.textContent || '',
        description: doc.querySelector('meta[property="og:description"]')?.getAttribute('content') ||
                    doc.querySelector('meta[name="description"]')?.getAttribute('content') || '',
        iconUrl: doc.querySelector('meta[property="og:image"]')?.getAttribute('content') || '',
        author: doc.querySelector('meta[name="author"]')?.getAttribute('content') ||
               doc.querySelector('meta[property="article:author"]')?.getAttribute('content') || '',
        themeColor: doc.querySelector('meta[name="theme-color"]')?.getAttribute('content') || '#FE5000'
      };

      // Update inputs
      if (metadata.title && elements.title) elements.title.value = metadata.title;
      if (metadata.description && elements.description) elements.description.value = metadata.description;
      if (metadata.iconUrl && elements.iconUrl) {
        try {
          elements.iconUrl.value = new URL(metadata.iconUrl, url).href;
        } catch { elements.iconUrl.value = metadata.iconUrl; }
      }
      if (metadata.author && elements.author) elements.author.value = metadata.author;
      if (metadata.themeColor && elements.themeColor) {
        elements.themeColor.value = metadata.themeColor;
        elements.themeColorText.value = metadata.themeColor;
      }

      updateJsonPreview(elements);
    } catch (error) {
      console.error('Metadata fetch failed:', error);
      alert('Failed to fetch metadata. The website might be blocking requests.');
    } finally {
      btn.disabled = false;
      btn.textContent = 'Fetch Metadata';
    }
  };

  // Real-time QR Generator (no validation, no UI updates)
  const generateQRRealtime = async (elements) => {
    const data = getFormData(elements);
    if (!data.url) return; // Skip if no URL

    const qrDataString = JSON.stringify(data);
    const options = {
      dotsType: elements.qrDotsStyle?.value || 'rounded',
      cornerSquareType: elements.qrCornerSquareStyle?.value || 'dot',
      cornerDotType: elements.qrCornerDotStyle?.value || 'dot',
      bgColor: elements.qrBgColor?.value || '#FFFFFF',
      fgColor: elements.themeColor?.value || '#FE5000',
      logoUrl: elements.iconUrl?.value || ''
    };

    // Create canvas for watermarked QR code
    const canvas = document.createElement('canvas');
    canvas.width = 340;
    canvas.height = 380;

    const ctx = canvas.getContext('2d');
    ctx.fillStyle = options.bgColor;
    ctx.fillRect(0, 0, 340, 380);

    // Generate QR code data URL
    let qrImageSrc;
    if (window.QRCodeStyling) {
      const qrCode = new window.QRCodeStyling({
        width: 300,
        height: 300,
        type: "canvas",
        data: qrDataString,
        margin: 10,
        qrOptions: { errorCorrectionLevel: "H" },
        imageOptions: { hideBackgroundDots: true, imageSize: 0.4, margin: 5 },
        dotsOptions: { color: options.fgColor, type: options.dotsType },
        backgroundOptions: { color: options.bgColor },
        cornersSquareOptions: { color: options.fgColor, type: options.cornerSquareType },
        cornersDotOptions: { color: options.fgColor, type: options.cornerDotType },
        ...(options.logoUrl && { image: options.logoUrl })
      });

      qrImageSrc = await new Promise((resolve) => {
        qrCode.getRawData('png').then((blob) => {
          const reader = new FileReader();
          reader.onloadend = () => resolve(reader.result);
          reader.readAsDataURL(blob);
        });
      });
    } else {
      // Fallback to API
      qrImageSrc = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qrDataString)}`;
    }

    // Draw QR code on canvas
    const qrImage = new Image();
    qrImage.crossOrigin = 'anonymous';
    qrImage.onload = function() {
      // Center QR code
      ctx.drawImage(qrImage, 20, 20, 300, 300);

      // Watermark
      ctx.fillStyle = '#666666';
      ctx.font = 'bold 14px Arial';
      ctx.textAlign = 'center';

      const creationName = elements.title?.value || '';
      const watermarkText = creationName ? `${creationName} | boondit.site` : 'boondit.site';
      ctx.fillText(watermarkText, 170, 355);

      // Update preview
      elements.qrCodeWrapper.innerHTML = '';
      elements.qrCodeWrapper.appendChild(canvas);

      // Store for download
      generatedQRCode = canvas.toDataURL('image/png');
      elements.downloadQRBtn.disabled = false;
    };

    qrImage.src = qrImageSrc;
  };

  // Download QR
  const downloadQR = (elements) => {
    if (!generatedQRCode) {
      alert('Please wait for QR code generation to complete');
      return;
    }

    const link = document.createElement('a');
    link.download = 'boondit-qr-code.png';
    link.href = generatedQRCode;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Take Screenshot
  const takeScreenshot = async (elements) => {
    const url = elements.url?.value;
    if (!url) {
      alert('Please enter a URL first');
      return;
    }

    const btn = elements.takeScreenshotBtn;
    btn.disabled = true;
    btn.textContent = '📸 Generating...';

    try {
      // Use Thum.io for client-side screenshot generation
      const screenshotUrl = `https://image.thum.io/get/width/240/height/282/${url}`;
      
      // Update the screenshot URL input
      elements.screenshotUrl.value = screenshotUrl;
      
      // Update previews
      updateScreenshotPreview(elements);
      updateJsonPreview(elements);
      
    } catch (error) {
      console.error('Screenshot failed:', error);
      alert('Failed to generate screenshot URL. Please try again.');
    } finally {
      btn.disabled = false;
      btn.textContent = 'Generate Screenshot URL';
    }
  };

  function initializeQRPage() {
    if (isInitialized) return;
    isInitialized = true;
    const elements = getElements();

    // Debounce function for real-time updates
    let qrDebounceTimer;
    const debounceQRGeneration = (elements) => {
      clearTimeout(qrDebounceTimer);
      qrDebounceTimer = setTimeout(() => generateQRRealtime(elements), 300);
    };

    // Live JSON and screenshot previews + QR generation
    [elements.url, elements.title, elements.description, elements.iconUrl, elements.author, elements.screenshotUrl, elements.themeColor].forEach(el => {
      if (el) {
        el.addEventListener('input', () => {
          updateJsonPreview(elements);
          debounceQRGeneration(elements);
        });
        el.addEventListener('change', () => {
          updateJsonPreview(elements);
          debounceQRGeneration(elements);
        });
      }
    });

    // QR styling fields
    [elements.qrBgColor, elements.qrDotsStyle, elements.qrCornerSquareStyle, elements.qrCornerDotStyle].forEach(el => {
      if (el) {
        el.addEventListener('input', () => debounceQRGeneration(elements));
        el.addEventListener('change', () => debounceQRGeneration(elements));
      }
    });

    if (elements.screenshotUrl) {
      elements.screenshotUrl.addEventListener('input', () => updateScreenshotPreview(elements));
      elements.screenshotUrl.addEventListener('change', () => updateScreenshotPreview(elements));
    }

    // Color sync
    syncColorInputs(elements.themeColor, elements.themeColorText, () => {
      updateJsonPreview(elements);
      debounceQRGeneration(elements);
    });
    syncColorInputs(elements.qrBgColor, elements.qrBgColorText, () => debounceQRGeneration(elements));

    // Buttons
    if (elements.fetchMetadataBtn) {
      elements.fetchMetadataBtn.addEventListener('click', () => fetchMetadata(elements));
    }
    if (elements.takeScreenshotBtn) {
      elements.takeScreenshotBtn.addEventListener('click', () => takeScreenshot(elements));
    }
    if (elements.downloadQRBtn) {
      elements.downloadQRBtn.addEventListener('click', () => downloadQR(elements));
    }

    updateJsonPreview(elements);
    updateScreenshotPreview(elements);
    
    // Generate initial QR code if URL exists
    if (elements.url?.value) {
      generateQRRealtime(elements);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeQRPage);
  } else {
    initializeQRPage();
  }
</script>

<style>
  .card {
    background: rgba(31,41,55,0.5);
    backdrop-filter: blur(6px);
    border-radius: 1rem;
    padding: 1.5rem;
    border: 1px solid #374151;
  }
  .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #fff;
    margin-bottom: 1.25rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  .card-subtitle {
    font-size: 1.1rem;
    font-weight: 600;
    color: #fff;
    margin-bottom: 1rem;
  }
  .form-group {
    margin-bottom: 1.1rem;
  }
  .form-label {
    display: block;
    font-size: 0.96rem;
    font-weight: 500;
    color: #cbd5e1;
    margin-bottom: 0.45rem;
  }
  .form-input, .form-select, .color-picker {
    display: block;
    width: 100%;
    background: #1f2937;
    color: #fff;
    border-radius: 0.6rem;
    border: 1px solid #374151;
    padding: 0.75rem 0.9rem;
    font-size: 1rem;
    transition: all .2s;
  }
  .form-select { padding-right: 2rem; }
  .color-picker { width: 3rem; height: 3rem; }

  .btn-primary, .btn-success, .btn-secondary, .btn-accent {
    font-weight: 600;
    border-radius: 0.7rem;
    padding: 0.9rem 1.1rem;
    font-size: 1.06rem;
    transition: background .18s;
    border: none;
  }
  .btn-primary { background: #2563eb; color: #fff; }
  .btn-success { background: #22c55e; color: #fff; }
  .btn-secondary { background: #ea580c; color: #fff; }
  .btn-accent { background: #a21caf; color: #fff; }

  .btn-primary:hover { background: #1d4ed8; }
  .btn-success:hover { background: #16a34a; }
  .btn-secondary:hover { background: #c2410c; }
  .btn-accent:hover { background: #86198f; }

  .btn-primary:disabled, .btn-success:disabled, .btn-secondary:disabled, .btn-accent:disabled {
    opacity: 0.6; cursor: not-allowed;
  }

  .preview-box, .preview-box-sm {
    border: 2px dashed #6b7280;
    border-radius: 0.7rem;
    background: #1f2937;
    padding: 2rem;
    min-height: 14rem;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    max-width: 22rem;
  }
  .preview-box-sm { padding: 1.1rem; min-height: 6.5rem; }

  .preview-placeholder {
    color: #94a3b8;
    text-align: center;
    font-size: 1rem;
  }

  .json-preview {
    background: #1e293b;
    border: 1px solid #374151;
    color: #22d3ee;
    border-radius: 0.6rem;
    padding: 1rem;
    font-size: 0.95rem;
    overflow-x: auto;
    scrollbar-width: thin;
    scrollbar-color: #4b5563 #1f2937;
  }
</style>
